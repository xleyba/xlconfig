server:
  port: 8761

spring:
  security:
    user:
      name: admin
      password: pwd

logging:
  level:
    org:
      springframework:
        security: DEBUG


# ---------------------------------------------------------
# Standalone server
# The combination of the two caches (client and server) and the heartbeats make a
# standalone Eureka server fairly resilient to failure, as long as there is some
# sort of monitor or elastic runtime (such as Cloud Foundry) keeping it alive.
# In standalone mode, you might prefer to switch off the client side behavior so
# that it does not keep trying and failing to reach its peers. The following example
# shows how to switch off the client-side behavior:
# ---------------------------------------------------------
eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      defaultZone:  http://admin:pwd@localhost:8761/eureka/
  server:
    waitTimeInMsWhenSyncEmpty: 0


